{"version":3,"sources":["hooks/useArray.tsx","hooks/useAlphabet.tsx","hooks/useLog.tsx","hooks/useGame.tsx","components/Node.tsx","components/Guesses.tsx","components/Keyboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useArray","initial","useState","data","setData","push","element","remove","index","filter","_","i","update","length","previousData","slice","isEmpty","reset","initializeAlphabet","alphabet","start","charCodeAt","String","fromCharCode","useAlphabet","setAlphabet","ch","status","prevState","updateNever","undefined","updateAlmost","updateSuccess","useLog","name","useEffect","console","log","initHistory","history","j","color","randomInt","end","Math","floor","random","useGame","row","setRow","col","setCol","wordle","setWordle","setStatus","answers","useRef","words","Set","parseTextFile","filename","fetch","process","then","res","text","split","fetchWords","a","answersArr","wordsArr","current","concat","getCharColors","guess","wordColors","wordleSet","has","newGame","submitGuess","curWord","map","x","join","handleBackspace","newRow","handleChar","statusColor","init","success","almost","never","areEqual","prevProps","nextProps","pair","Node","style","React","memo","Guesses","guesses","rows","Keyboard","characters","toUpperCase","KEYS","App","handleKeyPress","e","code","key","toLowerCase","window","addEventListener","removeEventListener","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","error","debug","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d09f9cca.chunk.js","sourcesContent":["import { useState } from 'react';\n\n// Purpose of this hook is to mimic normal arrays, this allows us to 'mutate' our state which we otherwise wouldn't be able to in React\nconst useArray = <T extends any>(initial: T[] = []) => {\n  const [data, setData] = useState(initial)\n\n  // Can push to the data like normally when not using React\n  const push = (element: T): void => {\n    setData([...data, element])\n  };\n\n  // Can remove from index of the data like normally when not using React\n  const remove = (index: number): void => {\n    setData(data.filter((_, i) => i !== index))\n  };\n\n  // Update element at index with new element\n  const update = (index: number, element: T): void => {\n    if(index < 0 || index >= data.length)\n      return\n    setData((previousData) => \n      [...previousData.slice(0, index), element, ...previousData.slice(index+1, previousData.length)]\n    )\n  }\n\n  const isEmpty = (): boolean => data.length === 0;\n\n  const reset = (): void => setData([]);\n\n  return { data, setData, useArray, push, remove, update, reset, isEmpty } as const\n}\n\nexport default useArray;","import { useState } from 'react';\n\ninterface Alphabet {\n  [key: string]: string\n}\n\nconst initializeAlphabet = (): Alphabet => {\n  let alphabet: Alphabet = {}\n  const start = 'a'.charCodeAt(0)\n  for(let i = start; i < start + 26; i ++) {\n    alphabet[String.fromCharCode(i)] = 'init'\n  }\n  return alphabet\n}\n\nconst useAlphabet = () => {\n  const [alphabet, setAlphabet] = useState<Alphabet>(initializeAlphabet())\n\n  // Helper function to use 'setAlphabet' to prevent DRY\n  const update = (ch: string, status: string): void => {\n    if(alphabet[ch] === status)\n      return\n    setAlphabet((prevState: Alphabet) => ({...prevState, [ch]: status}))\n  }\n\n  // Updates a character to 'never'\n  const updateNever = (ch: string): void => {\n    if(alphabet?.[ch] === undefined || alphabet?.[ch] === 'never' || alphabet?.[ch] === 'almost' || alphabet?.[ch] === 'success') return\n    update(ch, 'never')\n  }\n\n  // Updates a character to 'almost'\n  const updateAlmost = (ch: string): void => {\n    if(alphabet?.[ch] === undefined || alphabet?.[ch] === 'almost' || alphabet?.[ch] === 'success') return\n    update(ch, 'almost')\n\n  }\n\n  // Updates a character to 'success'\n  const updateSuccess = (ch: string): void => {\n    if(alphabet?.[ch] === undefined || alphabet?.[ch] === 'success') return\n    update(ch, 'success')\n\n  }\n\n  // Reset alphabet to default\n  const reset = (): void => {\n    setAlphabet(initializeAlphabet())\n  }\n\n  return { alphabet, updateNever, updateAlmost, updateSuccess, reset } as const\n}\n\nexport default useAlphabet;","import { useEffect } from 'react';\n\nconst useLog = <T extends any>(name: string, data: T) => {\n  useEffect(() => {\n    console.log(name, data)\n  }, [name, data])\n}\n\nexport default useLog","import { useState, useEffect, useRef } from 'react';\nimport useArray from './useArray';\nimport useAlphabet from './useAlphabet';\nimport useLog from './useLog';\n\nconst MAX_GUESSES = 6\nconst WORDLE_LEN = 5\nconst initHistory = (): CharColor[][] => {\n  let history: CharColor[][] = []\n  for(let i = 0; i < MAX_GUESSES; i ++) {\n    history.push([])\n    for(let j = 0; j < WORDLE_LEN; j ++) {\n      history[i].push( {ch: '_', color: 'init'} )\n    }\n  }\n  return history\n}\n\n// Returns random integer from [a, b]\nconst randomInt = (start: number, end: number): number => {\n  return start + Math.floor(Math.random() * (end - start + 1))\n}\n\n\ninterface CharColor {\n  ch: string\n  color: string\n}\n\nconst useGame = () => {\n  const [row, setRow] = useState<number>(0)\n  const [col, setCol] = useState<number>(0)\n  const [wordle, setWordle] = useState<string>('')\n  const alphabet = useAlphabet()\n  const history = useArray<CharColor[]>(initHistory())\n  const [status, setStatus] = useState<string>('ongoing')\n  const answers = useRef<string[]>([])\n  const words = useRef<Set<string>>(new Set())\n\n  useLog('Log: history: ', history.data)\n  useLog('Log: alphabet: ', alphabet.alphabet)\n\n  useEffect(() => {\n    // Function to read my text file from the 'public' folder\n    const parseTextFile = (filename: string): Promise<string[]> => {\n      return fetch(`${process.env.PUBLIC_URL}/${filename}`)\n      .then((res) => res.text())\n      .then((text) => {\n        return text.split(/\\r?\\n/)  // Split by /r/n on windows or /n on Unix using regex\n      })\n    }\n\n    // Parse 2 textfiles for possible answers + possible word guesses\n    const fetchWords = async (): Promise<void> => {\n      const answersArr = await parseTextFile('answers.txt')\n      const wordsArr = await parseTextFile('words.txt')\n      answers.current = answersArr\n      words.current = new Set(wordsArr.concat(answersArr))\n    }\n\n    // Pick a random wordle after fetching our words + answers\n    fetchWords()\n    .then(() => {\n      const index = randomInt(0, answers.current.length)\n      setWordle(answers.current[index])\n    })\n  }, [])\n  \n  const newGame = (): void => {\n    console.log(\"Log: started new game\")\n    const index = randomInt(0, answers.current.length)  // Get a random index\n    setWordle(answers.current[index]) // Pick a random wordle\n    setCol(0) // Reset col\n    setRow(0) // Reset row\n    history.setData(initHistory()) // Reset history\n    alphabet.reset() // Reset alphabet\n    setStatus('ongoing')  // Reset status\n  }\n\n  const submitGuess = (): void => {\n    if(status !== 'ongoing')\n      return\n    const curWord = history.data[row].map(x => x.ch).join('')\n    if(words.current.has(curWord)) {\n      history.update(row, getCharColors(curWord))  // Update row { guesses } of our history with new guess\n      setRow(row + 1) // Increment guess count\n      setCol(0) // New row, reset col back to 0\n      if(curWord === wordle) // Check if game is over\n        setStatus('win')\n      else if(row+1 === MAX_GUESSES)\n        setStatus('lose')\n    }\n  }\n\n  const handleBackspace = (): void => {\n    if(status !== 'ongoing' || col === 0)\n      return\n    const newRow = history.data[row].slice()\n    newRow[col-1] = { ch: '_', color: 'init'}\n    history.update(row, newRow)\n    setCol(col - 1)\n  }\n\n  const handleChar = (ch: string): void => {\n    if(status !== 'ongoing' || col >= WORDLE_LEN)\n      return\n    const newRow = history.data[row].slice()\n    newRow[col] = { ch: ch, color: 'init'}\n    history.update(row, newRow)\n    setCol(col + 1)\n  }\n\n  // Input is the current guess\n  // Will update the alphabet with green/yellow/black colors and display the new word after\n  const getCharColors = (guess: string): CharColor[] => {\n    let wordColors: CharColor[] = []\n    let wordleSet = new Set(wordle)\n\n    // Iterate through each character of the guess word\n    for(let i = 0; i < guess.length; i ++) {\n      const ch: string = guess[i]\n      if(ch === wordle[i]) {  // Character at index i of guess is same as character of wordle\n        wordColors.push( { ch: ch, color: 'success' } )\n        alphabet.updateSuccess(ch)\n      }\n      else if(wordleSet.has(ch)) {  // Otherwise, check if guess char is a char in the wordle\n        wordColors.push( { ch: ch, color: 'almost' } )\n        alphabet.updateAlmost(ch)\n      }\n      else {  // Otherwise, mark the character as 'never' possible\n        wordColors.push( { ch: ch, color: 'never' } )\n        alphabet.updateNever(ch)\n      }\n    }\n    return wordColors\n  }\n\n  return { row, wordle, history, alphabet, status, newGame, submitGuess, handleBackspace, handleChar } as const\n}\n\nexport default useGame;","import React from \"react\";\n\nconst statusColor: Record<string, string> = {\n  init: \"black\",\n  success: \"green\",\n  almost: \"orange\",\n  never: \"grey\",\n};\n\ninterface CharColor {\n  ch: string;\n  color: string;\n}\n\ninterface Props {\n  pair: CharColor;\n}\n\nconst areEqual = (prevProps: Props, nextProps: Props): boolean => {\n  return prevProps.pair.ch === nextProps.pair.ch && prevProps.pair.color === nextProps.pair.color\n}\n\nconst Node = ({ pair }: Props) => {\n  return <span style={{ color: statusColor[pair.color] }}>{pair.ch}</span>;\n}\n\nexport default React.memo(Node, areEqual)","import React from \"react\";\nimport Node from \"./Node\";\n\ninterface CharColor {\n  ch: string;\n  color: string;\n}\n\ninterface Props {\n  guesses: CharColor[][];\n  row: number;\n}\n\nconst Guesses = ({ guesses, row }: Props) => {\n  console.log('Log: render guesses')\n  return(\n    <>\n      {guesses.map((guess, index) => (\n        <div key={index}>\n          {`guess #${index + 1}: `}\n          {guess.map((pair, index) => (\n            <Node key={`${pair.ch}${index}`} pair={pair} />\n          ))}\n          {index === row && <span> &lt;&lt; </span>}\n        </div>\n      ))}\n    </>\n  )\n}\n\nexport default React.memo(Guesses)","import React from \"react\";\nimport Node from \"./Node\";\n\nconst rows = [\n  [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n  [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"],\n  [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\"],\n];\n\ninterface Alphabet {\n  [key: string]: string;\n}\n\ninterface Props {\n  alphabet: Alphabet;\n}\n\nconst Keyboard = ({ alphabet }: Props) => {\n  console.log(\"Log: render keyboard\");\n  return (\n    <>\n      {rows.map((characters, index) => (\n        <div key={index}>\n          {characters.map((ch) => (\n            <Node\n              key={ch}\n              pair={{ ch: ch.toUpperCase(), color: alphabet[ch] }}\n            />\n          ))}\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default React.memo(Keyboard);\n","import React, { useState, useEffect, useRef } from \"react\";\nimport useGame from \"./hooks/useGame\";\nimport Guesses from \"./components/Guesses\";\nimport Keyboard from \"./components/Keyboard\";\n\nconst KEYS = new Set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n\nconst App = () => {\n  const { row, wordle, history, alphabet, status, newGame, submitGuess, handleBackspace, handleChar } =\n    useGame();\n\n  const handleKeyPress = (e: KeyboardEvent): void => {\n    if(e.code === 'Enter')\n      submitGuess()\n    else if(e.code === 'Backspace')\n      handleBackspace()\n    else if(KEYS.has(e.key.toLowerCase()))\n      handleChar(e.key.toLowerCase())\n    else if(e.code === 'Space')\n      newGame()\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyPress);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [handleKeyPress])\n\n  return (  \n    <div>\n      <div><strong> WIP 😂 </strong></div>\n      {`status: ${status}`}\n      <br />\n      {`guesses: ${row}`}\n      <br />\n      {`wordle: ${wordle}`}\n      <br />\n      <button onClick={newGame}> restart </button>\n      <br />\n      <br />\n      <Guesses guesses={history.data} row={row}/>\n      <br />\n      <Keyboard alphabet={alphabet.alphabet} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// replace console.* for disable log on production\nif (process.env.NODE_ENV === 'production') {\n  console.log(\"Log: no logs in production\")\n  console.log = () => {}\n  console.error = () => {}\n  console.debug = () => {}\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}