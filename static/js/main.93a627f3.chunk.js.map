{"version":3,"sources":["hooks/useArray.tsx","hooks/useGame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useArray","initial","useState","data","setData","push","element","remove","index","filter","_","i","isEmpty","length","useGame","guesses","setGuesses","wordle","setWordle","history","status","setStatus","answers","useRef","words","Set","useEffect","fetchWords","filename","fetch","process","then","res","text","split","current","newGame","concat","console","log","start","end","Math","floor","random","guessWord","word","has","App","input","setInput","game","onClick","onSubmit","e","preventDefault","handleSubmit","onChange","target","value","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAEaA,EAAW,SAAXA,IAAkD,IAAvBC,EAAsB,uDAAP,GACrD,EAAwBC,mBAASD,GAAjC,mBAAOE,EAAP,KAAaC,EAAb,KAEMC,EAAO,SAACC,GACZF,EAAQ,GAAD,mBAAKD,GAAL,CAAWG,MAGdC,EAAS,SAACC,GACdJ,EAAQD,EAAKM,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMH,OAGhCI,EAAU,kBAA+B,IAAhBT,EAAKU,QAEpC,MAAO,CAAEV,OAAMH,WAAUK,OAAME,SAAQK,YCP5BE,EAAU,WACrB,MAA8BZ,mBAAiB,GAA/C,mBAAOa,EAAP,KAAgBC,EAAhB,KACA,EAA4Bd,mBAAiB,IAA7C,mBAAOe,EAAP,KAAeC,EAAf,KACMC,EAAUnB,EAAiB,IACjC,EAA4BE,mBAAiB,WAA7C,mBAAOkB,EAAP,KAAeC,EAAf,KACMC,EAAUC,iBAAiB,IAC3BC,EAAQD,iBAAoB,IAAIE,KAEtCC,qBAAU,WAER,IAAMC,EAAa,SAACC,GAClB,OAAOC,MAAM,GAAD,OAAIC,aAAJ,YAA8BF,IACzCG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,OAAOA,EAAKC,MAAM,UAItBP,EAAW,eACVI,MAAK,SAACE,GACLX,EAAQa,QAAUF,EAClBG,OAGFT,EAAW,aACVI,MAAK,SAACE,GACLT,EAAMW,QAAU,IAAIV,IAAIQ,EAAKI,OAAOf,EAAQa,eAE7C,IAEH,IAAMC,EAAU,WACdE,QAAQC,IAAI,YACZvB,EAAW,GACX,IArCewB,EAAeC,EAqCxBjC,GArCSgC,EAqCS,EArCMC,EAqCHnB,EAAQa,QAAQtB,OApCtC2B,EAAQE,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAQ,KAqCvDtB,EAAUI,EAAQa,QAAQ3B,KAiB5B,MAAO,CAAEO,UAASE,SAAQE,UAASC,SAAQgB,UAASS,UAdlC,SAACC,GACbtB,EAAMW,QAAQY,IAAID,IAAoB,YAAX1B,IAE/BD,EAAQd,KAAKyC,GACbR,QAAQC,IAAIO,IAAS7B,EAAS,gBAAkB,eAChDD,EAAWD,EAAU,GAClB+B,IAAS7B,EACVI,EAAU,OAEJN,EAAQ,IAAM,GACpBM,EAAU,Y,OCtBD2B,EA9BA,WACb,MAA0B9C,mBAAiB,IAA3C,mBAAO+C,EAAP,KAAcC,EAAd,KACMC,EAAOrC,IAOb,OACE,gCACGqC,EAAK/B,OACN,uBACC+B,EAAKpC,QACN,uBACCoC,EAAKlC,OACN,uBACA,wBAAQmC,QAASD,EAAKf,QAAtB,uBACA,uBACA,uBAAMiB,SAAU,SAACC,GAAD,OAfC,SAACA,GACpBA,EAAEC,iBACFJ,EAAKN,UAAUI,GAaUO,CAAaF,IAApC,UACE,uBAAOG,SAAU,SAACH,GAAD,OAAOJ,EAASI,EAAEI,OAAOC,UAC1C,gDAEDR,EAAKhC,QAAQhB,KAAKyD,KAAI,SAACd,EAAMtC,GAAP,OACrB,oCAA+BsC,EAA/B,gBAAaA,GAAb,OAAoBtC,WCbbqD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.93a627f3.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport const useArray = <T extends any>(initial: T[] = []) => {\n  const [data, setData] = useState(initial)\n  \n  const push = (element: T) => {\n    setData([...data, element])\n  };\n\n  const remove = (index: number) => {\n    setData(data.filter((_, i) => i !== index))\n  };\n\n  const isEmpty = (): boolean => data.length === 0;\n\n  return { data, useArray, push, remove, isEmpty } as const\n}","import { useState, useEffect, useRef } from 'react';\nimport { useArray } from './useArray';\n\n// Returns random integer from [a, b]\nconst randomInt = (start: number, end: number): number => {\n  return start + Math.floor(Math.random() * (end - start + 1))\n}\n\nexport const useGame = () => {\n  const [guesses, setGuesses] = useState<number>(5)\n  const [wordle, setWordle] = useState<string>('')\n  const history = useArray<string>([])\n  const [status, setStatus] = useState<string>('ongoing')\n  const answers = useRef<string[]>([])\n  const words = useRef<Set<string>>(new Set())\n\n  useEffect(() => {\n    // Function to read my text file from the 'public' folder\n    const fetchWords = (filename: string): Promise<string[]> => {\n      return fetch(`${process.env.PUBLIC_URL}/${filename}`)\n      .then((res) => res.text())\n      .then((text) => {\n        return text.split('\\n')\n      })\n    }\n    // Fetch words from answers.txt and pick a random one as the wordle after promise is resolved\n    fetchWords('answers.txt')\n    .then((text) => {\n      answers.current = text\n      newGame()\n    })\n    // Fetch words from words.txt\n    fetchWords('words.txt')\n    .then((text) => {\n      words.current = new Set(text.concat(answers.current))\n    })\n  }, [])\n  \n  const newGame = (): void => {\n    console.log(\"New game\")\n    setGuesses(5)\n    const index = randomInt(0, answers.current.length)\n    setWordle(answers.current[index])\n  }\n\n  const guessWord = (word: string): void => {\n    if(!words.current.has(word) || status !== 'ongoing')\n      return\n    history.push(word)\n    console.log(word === wordle ? \"Correct guess\" : \"Wrong guess\")\n    setGuesses(guesses - 1)\n    if(word === wordle) {\n      setStatus('win')\n    }\n    else if(guesses-1 === 0) {\n      setStatus('lose')\n    }\n  }\n\n  return { guesses, wordle, history, status, newGame, guessWord } as const\n}","import React, { useState, FC } from 'react';\nimport { useGame } from './hooks/useGame'\n\nconst App:FC = () => {\n  const [input, setInput] = useState<string>('')\n  const game = useGame()\n\n  const handleSubmit = (e: React.FormEvent): void => {\n    e.preventDefault()\n    game.guessWord(input)\n  }\n\n  return(\n    <div> \n      {game.status}\n      <br/>\n      {game.guesses}\n      <br/>\n      {game.wordle} \n      <br/>\n      <button onClick={game.newGame}> restart </button>\n      <br/>\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <input onChange={(e) => setInput(e.target.value)}></input>\n        <button> guess </button>\n      </form>\n      {game.history.data.map((word, index) => \n        <div key={`${word}${index}`}> {word} </div>\n      )}\n    </div>\n  ) \n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}