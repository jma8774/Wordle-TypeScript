{"version":3,"sources":["hooks/useArray.tsx","hooks/useLog.tsx","hooks/useAlphabet.tsx","hooks/useGame.tsx","components/Node.tsx","components/InputWord.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useArray","initial","useState","data","setData","push","element","remove","index","filter","_","i","isEmpty","length","reset","useLog","name","useEffect","console","log","initializeAlphabet","alphabet","start","charCodeAt","String","fromCharCode","randomInt","end","Math","floor","random","useGame","guesses","setGuesses","wordle","setWordle","setAlphabet","update","ch","status","prevState","updateNever","undefined","updateAlmost","updateSuccess","useAlphabet","history","setStatus","answers","useRef","words","Set","parseTextFile","filename","fetch","process","then","res","text","split","fetchWords","a","answersArr","wordsArr","current","concat","updateCharColors","guess","wordColors","wordleSet","color","has","newGame","guessWord","word","statusColor","success","almost","never","React","memo","pair","style","handleSubmit","input","setInput","onSubmit","e","onChange","target","value","App","onClick","InputWord","preventDefault","map","Node","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29c139bf.chunk.js","sourcesContent":["import { useState } from 'react';\n\n// Purpose of this hook is to mimic normal arrays, this allows us to 'mutate' our state which we otherwise wouldn't be able to in React\nexport const useArray = <T extends any>(initial: T[] = []) => {\n  const [data, setData] = useState(initial)\n\n  // Can push to the data like normally when not using React\n  const push = (element: T) => {\n    setData([...data, element])\n  };\n\n  // Can remove from index of the data like normally when not using React\n  const remove = (index: number) => {\n    setData(data.filter((_, i) => i !== index))\n  };\n\n  const isEmpty = (): boolean => data.length === 0;\n\n  const reset = (): void => setData([]);\n\n  return { data, useArray, push, remove, reset, isEmpty } as const\n}","import { useEffect } from 'react';\n\nexport const useLog = <T extends any>(name: string, data: T) => {\n  useEffect(() => {\n    console.log(name, data)\n  }, [name, data])\n}","import { useState } from 'react';\nimport { useLog } from './useLog';\n\ninterface Alphabet {\n  [key: string]: string\n}\n\nconst initializeAlphabet = (): Alphabet => {\n  let alphabet: Alphabet = {}\n  const start = 'a'.charCodeAt(0)\n  for(let i = start; i < start + 26; i ++) {\n    alphabet[String.fromCharCode(i)] = 'init'\n  }\n  return alphabet\n}\n\nexport const useAlphabet = () => {\n  const [alphabet, setAlphabet] = useState<Alphabet>(initializeAlphabet())\n  useLog('alphabet: ', alphabet)\n\n  // Helper function to use 'setAlphabet' to prevent DRY\n  const update = (ch: string, status: string): void => {\n    setAlphabet((prevState: Alphabet) => ({...prevState, [ch]: status}))\n  }\n\n  // Updates a character to 'never'\n  const updateNever = (ch: string): void => {\n    if(alphabet?.[ch] === undefined || alphabet?.[ch] === 'never' || alphabet?.[ch] === 'almost' || alphabet?.[ch] === 'success') return\n    update(ch, 'never')\n  }\n\n  // Updates a character to 'almost'\n  const updateAlmost = (ch: string): void => {\n    if(alphabet?.[ch] === undefined || alphabet?.[ch] === 'almost' || alphabet?.[ch] === 'success') return\n    update(ch, 'almost')\n\n  }\n\n  // Updates a character to 'success'\n  const updateSuccess = (ch: string): void => {\n    if(alphabet?.[ch] === undefined || alphabet?.[ch] === 'success') return\n    update(ch, 'success')\n\n  }\n\n  // Reset alphabet to default\n  const reset = (): void => {\n    setAlphabet(initializeAlphabet())\n  }\n\n  return { alphabet, updateNever, updateAlmost, updateSuccess, reset } as const\n}","import { useState, useEffect, useRef } from 'react';\nimport { useArray } from './useArray';\nimport { useAlphabet } from './useAlphabet';\nimport { useLog } from './useLog';\n\n// Returns random integer from [a, b]\nconst randomInt = (start: number, end: number): number => {\n  return start + Math.floor(Math.random() * (end - start + 1))\n}\n\ninterface CharColor {\n  ch: string\n  color: string\n}\n\nexport const useGame = () => {\n  console.log(\"render useGame\")\n  const [guesses, setGuesses] = useState<number>(6)\n  const [wordle, setWordle] = useState<string>('')\n  const alphabet = useAlphabet()\n  const history = useArray<CharColor[]>([])\n  const [status, setStatus] = useState<string>('ongoing')\n  const answers = useRef<string[]>([])\n  const words = useRef<Set<string>>(new Set())\n\n  useLog('history: ', history.data)\n\n  useEffect(() => {\n    // Function to read my text file from the 'public' folder\n    const parseTextFile = (filename: string): Promise<string[]> => {\n      return fetch(`${process.env.PUBLIC_URL}/${filename}`)\n      .then((res) => res.text())\n      .then((text) => {\n        return text.split('\\n')\n      })\n    }\n\n    // Parse 2 textfiles for possible answers + possible word guesses\n    const fetchWords = async (): Promise<void> => {\n      const answersArr = await parseTextFile('answers.txt')\n      const wordsArr = await parseTextFile('words.txt')\n      answers.current = answersArr\n      words.current = new Set(wordsArr.concat(answersArr))\n    }\n\n    // Pick a random wordle after fetching our words + answers\n    fetchWords()\n    .then(() => {\n      const index = randomInt(0, answers.current.length)\n      setWordle(answers.current[index])\n    })\n  }, [])\n  \n  const newGame = (): void => {\n    console.log(\"started new game\")\n    setGuesses(6) // Reset guesses to 6\n    const index = randomInt(0, answers.current.length)  // Get a random index\n    setWordle(answers.current[index]) // Pick a random wordle\n    history.reset() // Reset history\n    alphabet.reset() // Reset alphabet\n    setStatus('ongoing')  // Reset status\n  }\n\n  const guessWord = (word: string): void => {\n    if(!words.current.has(word) || status !== 'ongoing')\n      return\n    history.push(updateCharColors(word))  // Update alphabet highlights + push guess word to history with color highlights\n    setGuesses(guesses - 1) // Decrement guess count\n    if(word === wordle) // Check if game is over\n      setStatus('win')\n    else if(guesses-1 === 0)\n      setStatus('lose')\n  }\n\n  // Input is the current guess\n  // Will update the alphabet with green/yellow/black colors and display the new word after\n  const updateCharColors = (guess: string): CharColor[] => {\n    let wordColors: CharColor[] = []\n    let wordleSet = new Set(wordle)\n\n    // Iterate through each character of the guess word\n    for(let i = 0; i < guess.length; i ++) {\n      const ch: string = guess[i]\n      if(ch === wordle[i]) {  // Character at index i of guess is same as character of wordle\n        wordColors.push( { ch: ch, color: 'success' } )\n        alphabet.updateSuccess(ch)\n      }\n      else if(wordleSet.has(ch)) {  // Otherwise, check if guess char is a char in the wordle\n        wordColors.push( { ch: ch, color: 'almost' } )\n        alphabet.updateAlmost(ch)\n      }\n      else {  // Otherwise, mark the character as 'never' possible\n        wordColors.push( { ch: ch, color: 'never' } )\n        alphabet.updateNever(ch)\n      }\n    }\n    return wordColors\n  }\n\n  return { guesses, wordle, history, alphabet, status, newGame, guessWord } as const\n}","import React from 'react'\n\nconst statusColor: Record<string, string> = {\n  success: 'green',\n  almost: 'orange',\n  never: 'black'\n}\n\ninterface CharColor {\n  ch: string\n  color: string\n}\n\ninterface Props {\n  pair: CharColor\n}\n\nexport default React.memo(({ pair }: Props) => {\n  return (\n    <span style={{ color: statusColor[pair.color] }}>{pair.ch}</span>\n  )\n})","import React, { useState } from 'react'\n\ninterface Props {\n  handleSubmit(e: React.FormEvent, input: string): void \n}\n\nexport default React.memo(({ handleSubmit }: Props) => {\n  const [input, setInput] = useState<string>('')\n  return (\n    <form onSubmit={(e) => {handleSubmit(e, input)}}>\n      <input onChange={(e) => setInput(e.target.value)} value={input}/>\n      <button> guess </button>\n    </form>\n  )\n})","import React, { useState } from 'react';\nimport { useGame } from './hooks/useGame'\nimport Node from './components/Node'\nimport InputWord from './components/InputWord'\n\nconst App = () => {\n  console.log(\"render app\")\n  const { guesses, wordle, history, alphabet, status, newGame, guessWord } = useGame()  \n\n  const handleSubmit = (e: React.FormEvent, input: string): void => {\n    e.preventDefault()\n    guessWord(input)\n  }\n\n  return(\n    <div> \n      {`status: ${status}`}\n      <br/>\n      {`guesses left: ${guesses}`}\n      <br/>\n      {`wordle: ${wordle}`} \n      <br/>\n      <button onClick={newGame}> restart </button>\n      <br/>\n      <InputWord handleSubmit={handleSubmit}/>\n      {\n        history.data.map((guess, index) => \n          <div key={index} >\n            {`guess #${index+1}: `}\n            {\n              guess.map((pair, index) => <Node key={`${pair.ch}${index}`} pair={pair} />)\n            }\n          </div>\n        )\n      }\n    </div>\n  ) \n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}